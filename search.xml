<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Markdown写作</title>
      <link href="/shoresouth/2022/05/04/markdown-shi-yong/"/>
      <url>/shoresouth/2022/05/04/markdown-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要写作，为什么要发表？"><a href="#为什么要写作，为什么要发表？" class="headerlink" title="为什么要写作，为什么要发表？"></a>为什么要写作，为什么要发表？</h1><p>写作是一种表达方式，像您这么有才的人肯定有很多东西想表达。</p><p>比如你有什么新想法，新点子，洗澡的时候突然想到的，然后第二天就忘了。<br>再比如，今天研究过程中遇到了什么难题，费了好大好大劲找到了一个绝妙的方法，然后过两天你又遇到了这个问题。<br>或者，有个师弟来跟你请教了些问题，你耐心的解答了，第二天，又来了个师妹问你这个问题。<br>或者，你吃饭时，跟别人扯了个故事，一桌的人都觉得精彩，结果也就这么几个人知道这个传说。<br>也许，你就是想多年后回头，能够再次感受那充满激情的科研时光，记忆要是能够再清晰一点多好。</p><p>如果，你经常写作，是不是人生都不一样了。</p><p>写作作为一种表现形式，我觉得是最适合科研工作者的一种表现形式。现在人人都是content creator，尤其是youtube和抖音的流行，导致现在最流行的一种表现形式时视频。视频确实有他的特点，就是消费方便，看一个视频感觉好轻松，但是视频做起来却很复杂。这就导致了视频，没法天天做，前面说到的那些情景很多，视频就没法满足。写作的阻力就小很多，我可以每天写，有灵感的时候马上就写。写很灵活，5分钟能写一篇，15分钟也能写一篇，10个小时也可以。写作也比视频正式，更能让人静下心来认真品味。而那些随意的短视频，随手一滑就过去了，占用了时间却没有有任何收获。相比消费视频，消费文章需要更多的投入，这也也是一大优势，你能过滤掉那些不动脑子人，而激发那些渴望知识的人的欲望（我后面会写一篇文章详细介绍其中的科学原理）。</p><p>你现在应该发现了即使不发表，写作也有很多好处。 那为什么要发表呢？</p><p>这里我要提一个词：Influencer，影响者。我觉得这是一个由能力有想法的人最应该成为的角色。做一个influencer，你可以最大化你的贡献。从个人的角度触发，当有任知道并且认同、支持、感激你的想法的时候，我觉得这是最有生就感的事情。当然你的想法也不是100%都能被人接受，当有人给你提出意见反馈的时候也是提升自我的机会。同时你的作品也许能给你带了和作者，合作机会等等。你看看现在那些比较大的influencer，都是谁，什么卖口红的，打游戏，作为科研工作者，你不觉得你有义务影响一下这个世界吗？</p><p>总之写作好，发表好。</p><h1 id="为什么要用Markdown写作？"><a href="#为什么要用Markdown写作？" class="headerlink" title="为什么要用Markdown写作？"></a>为什么要用Markdown写作？</h1><p>Markdown是一种轻量化文本标记语言，这么说你可能有点懵。这么说，Markdown是一种格式，一种非常简单的，让作者可以充分关注写作内容的格式。使用Markdown，不需要排版，因为他根本就没有这个功能。你只要关心内容，只管写就可以了，Markdown渲染器，会让他变成一篇简洁清爽的文章，读者读起来也会非常舒爽。你现在看到的这篇文章就是Markdown写的。</p><p>Markdown他虽然简单，但是它可以实现很多厉害的功能，例如方便点的编写易于阅读的代码、方便地插入公式等等。在使用合适的工具下Markdown写作体验远远超过Word。我现在只有写那些什么报告，申请那些官文采用word，其他时候都用Markdown。</p><h2 id="安装Markdown相关的各种插件"><a href="#安装Markdown相关的各种插件" class="headerlink" title="安装Markdown相关的各种插件"></a>安装Markdown相关的各种插件</h2><ol><li><p>Markdown All in One 这个辅助Markdown写作的。</p></li><li><p>Markdown PDF 这个可以把Markdown渲染成PDF，这样你可以发给不会使用Markdown的人阅读。</p></li><li><p>Paste Image 这个允许你直接将图片粘贴到Markdown文件。</p></li><li><p>Code Spell Checker 这个是拼写检查，帮你找错别字的，这个是支持英文，需要中文的话可以使用Spell Right，不过不知为啥在某些电脑上不能用。</p></li><li><p>LimfxCodeEx 这个允许你快速的发表你写的文章，是改变你写作人生的一个神器。</p><h1 id="Markdown的基本格式"><a href="#Markdown的基本格式" class="headerlink" title="Markdown的基本格式"></a>Markdown的基本格式</h1><p>Markdown写起来非常顺畅，因为格式是直接使用标记实现的，而且很少，所以写的时候，不用考虑很多格式相关的东西，全称可以不离开键盘。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>只要在文字前面打上#空格就可以，这一行的文字就会变成标题，#的个数代表标题的级别。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p> 这里介绍一下段落，就是paragraphs。我们在写的时候如果按下enter，我们代码会换一行，但是实际渲染出来并不会换行：</p></li></ol><p>第一段话<br>第二段话</p><p>那要怎么开启新的一段呢？需要空一行，代笔新的一段：</p><p>第一段话</p><p>第二段话</p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>强调有两种一种是 <em>斜体</em> ,一种是 <strong>加粗</strong>。分别用* * / ** **。 快捷键crtl+i/crtl+b。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表分为顺序编号和无编号。</p><ol><li>这是一级列表</li><li>有编号的列表<ol><li>这是二级列表</li><li>可以用tab和tab+shift/Backspace缩进<ol><li>从1开始，数字+’.’+’空格’</li></ol></li></ol></li></ol><ul><li>这是无编号的列表</li></ul><ul><li>用-号也可以</li></ul><ul><li>用+号也可以<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2>推荐您把图片复制到您文章目录下，用下面得语法加入图片。</li></ul><p><code>![图片名称](imageFile.png)</code>  </p><p>除了文件名，其他的描述和caption都是可选的。描述就是你把鼠标停留在图片上显示出来的字，也是图片无法加载时显示的文字。</p><p>要注意的是如果你使用了Markdown All in One，你在打出![](之后他会弹出自动补全帮你快速输入图片文件名。</p><p>如果这个你觉得麻烦还记得我们之前安装的Paste Image插件吗？只要你在别处复制一幅图，例如用QQ截图截图，然后在要插入的地方按ctrl+alt+v将图片粘贴插入。</p><p><img src="/shoresouth/17.jpg" alt="sights"></p><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>公式是Markdown的亮点，因为它支持Latex格式公式，虽然新版的Word也支持了，不过还是Markdown写起来流畅。</p><p>首先我们有inline公式只要在文中输入两个美元符号，之间的内容就是公示了，注意美元符号要和前后的文本之间有个空格，确保兼容性：$\lim_{x \to \infin}f(x)$。<br><code>$\lim_{x \to \infin}f(x)$</code></p><p>当然你也可以写独立的公式就是一对美元符号之间的内容：<br>$$<br>\lim_{x \to 0}\frac{sin(t)}{x}=1<br>$$</p><pre class="line-numbers language-none"><code class="language-none">$$\lim_{x \to 0}\frac{sin(t)}{x}=1$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到公式是线性写的，你在纸上怎么写就在这里怎么写， \ 后面可以跟特殊的符号、希腊字母等，_ 和 ^分别对应上下标，{}可以把符号变成一组例如：$x^a<em>b$ 和 $x^{a</em>b}$ 这种区别: x^a<em>bx a∗b 和 x^{a</em>b}x a∗b。 再公式重要换行的话需要输入一行\，可以输入\tag{1}给公式编号。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格略有点麻烦：</p><table><thead><tr><th>Markdown</th><th align="center">Less</th><th align="right">Pretty</th></tr></thead><tbody><tr><td><em>默认左对齐</em></td><td align="center"><code>此列剧中</code></td><td align="right"><strong>此列右对齐</strong></td></tr><tr><td>1</td><td align="center">2</td><td align="right">3</td></tr><tr><td>11</td><td align="center">22</td><td align="right">33</td></tr></tbody></table><p>首先用 | 来定义列，— | :—: | —:这个放在第一列下面用于区分表头，冒号的位置用来决定事剧中还是右对齐、左对齐。</p><p>有个简单的玩法就是：Markdown Tables Generator</p><p>在这里你可以把word，excel里面的表格直接粘贴到网页中，然后生成对应的整齐的Markdown表格。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接可以连接到网上某个url网址，如果是下面这个语法：</p><pre class="line-numbers language-none"><code class="language-none">[google](https://www.google.com/)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用Markdown All in One,则可复制一个合法的url，然后选中某个文字直接粘贴变成一个链接。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>我们平时会使用到代码，Markdown最闪耀的就是渲染代码里，如果渲染器支持可以实现各种语言语法的高亮。首先是inline代码，只要再行中写两个``之间的就会被认为是代码，不会被Markdown渲染格式。但是inline代码不支持指定语言。你可以这么写：</p><p><code>python s = "Python syntax highlighting" print s </code></p><p><code>javascript var s = "JavaScript syntax highlighting"; alert(s); </code></p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>由于Markdown本身是一种代码，需要渲染才能够看着比较舒服，所以如果你发给不会使用Markdown的人可能会有困扰。我们之前装了Markdown PDF，因此可以输出成PDF、图片、网页等等渲染过的格式。只需要再md文件编辑的地方点击右键就可以看到输出成PDF等选项了。</p><p>注意，Markdown PDF树池不支持公式渲染，大家可以使用pandoc插件输出，那个很强大，还可以输出为Word文档。除了插件，你还需要安装Pandoc这个软件。只需要按下ctrl+shift+p，在命令框中输入pandoc render，剩下的自己就能看明白了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>分割线：很简单，单独一段就打上三个减号：—</p><hr><p>引用：在需要有用的一行前加上&gt;:</p><blockquote><p>这是引用</p></blockquote><blockquote><p>这也是哦</p></blockquote><p>其他还有的我就不介绍了大家自己摸索，注意Markdown没有什么字体类型、颜色、大小的设置，只有标题级别段落。所以说他是以内容为中心的写作方式。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github————个人博客搭建</title>
      <link href="/shoresouth/2022/05/04/ge-ren-bo-ke-da-jian/"/>
      <url>/shoresouth/2022/05/04/ge-ren-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<p>本人博客：<a href="https://shoresouth.github.io/">https://shoresouth.github.io/</a><br>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。</p><span id="more"></span><h2 id="安装相关工具"><a href="#安装相关工具" class="headerlink" title="安装相关工具"></a>安装相关工具</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><p>node.js下载官网: <a href="http://nodejs.cn/download/">nodejs官网</a></p><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><pre class="line-numbers language-none"><code class="language-none">node -v 显示安装的nodejs版本npm -v 显示安装的npm版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改全局模块下载路径"><a href="#修改全局模块下载路径" class="headerlink" title="修改全局模块下载路径"></a>修改全局模块下载路径</h4><ol><li>我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹[D:\Nodejs]下创建两个文件夹[node_global]及[node_cache]</li><li>创建完两个空文件夹之后，打开命令行界面，输入下面命令:<pre class="line-numbers language-none"><code class="language-none">npm config set prefix "D:\Nodejs\node_global"npm config set cache "D:\Nodejs\node_cache"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>修改系统环境变量</li></ol><ul><li>将【用户变量】下的【Path】修改为【D:\Nodejs\node_global】，之后点击确定。</li><li>在【系统变量】下新建【NODE_PATH】【D:\Nodejs\node_global\node_modules】</li><li>在【系统变量】下的【Path】新建添加【%NODE_HOME%】和node全局文件夹【D:\Nodejs\node_global】，之后点击确定。</li></ul><p>经过上面的步骤，nodejs下载的模块就会自动下载到我们自定义的目录，接下来我们测试一下。输入下面的命令：</p><pre class="line-numbers language-none"><code class="language-none">npm install express -g     # -g是全局安装的意思，不加 -g 就是默认下载到当前目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注：</strong> 可能由于权限的原因出现报错，右击Nodejs文件夹-&gt;属性-&gt;安全，点击编辑，将所有权限都✔即可。</p><h4 id="更换npm源为淘宝镜像"><a href="#更换npm源为淘宝镜像" class="headerlink" title="更换npm源为淘宝镜像"></a>更换npm源为淘宝镜像</h4><p>说明：npm 默认的 registry ,也就是下载 npm 包时是从国外的服务器下载，国内很慢，一般都会指向淘宝 <a href="https://registry.npm.taobao.org./">https://registry.npm.taobao.org。</a></p><pre class="line-numbers language-none"><code class="language-none">npm config get registry //查看npm源npm config set registry https://registry.npm.taobao.org/ //更换镜像为淘宝镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="全局安装基于淘宝源的cnpm"><a href="#全局安装基于淘宝源的cnpm" class="headerlink" title="全局安装基于淘宝源的cnpm"></a>全局安装基于淘宝源的cnpm</h4><p>说明：由于npm的服务器在海外，所以访问速度比较慢，访问不稳定 ，cnpm的服务器是由淘宝团队提供服务器在国内cnpm是npm镜像，一般会同步更新，相差在10分钟，所以cnpm在安装一些软件时候会比较有优势。但是一般cnpm只用于安装时候，在项目创建与卸载等相关操作时候我们还是使用npm。</p><pre class="line-numbers language-none"><code class="language-none">全局安装基于淘宝源的cnpmnpm install -g cnpm --registry=https://registry.npm.taobao.org查看cnpm是否安装成功cnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p><h4 id="安装环境-1"><a href="#安装环境-1" class="headerlink" title="安装环境"></a>安装环境</h4><p>git官网：<a href="https://git-scm.com/">Git</a></p><h4 id="验证安装-1"><a href="#验证安装-1" class="headerlink" title="验证安装"></a>验证安装</h4><pre class="line-numbers language-none"><code class="language-none">git --version   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre class="line-numbers language-none"><code class="language-none">git config -l  //查看所有配置git config --system --list //查看系统配置git config --global --list //查看用户（全局）配置git config –global core.editor vim （编辑器名） //修改默认编辑器git config --global user.name  "自己的用户名" //配置用户名git config --global user.emal  "自己的邮箱" //配置邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><h4 id="安装环境-2"><a href="#安装环境-2" class="headerlink" title="安装环境"></a>安装环境</h4><p>必须按照步骤来，因为hexo需要使用node.js的npm命令。</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-cli // 下载hexohexo -v // 查看是否安装成功hexo init // 初始化hexo文件夹npm install // 下载模块依赖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h2><h3 id="github设置远程库"><a href="#github设置远程库" class="headerlink" title="github设置远程库"></a>github设置远程库</h3><ul><li>登录后点击“+”号，选择New repository</li><li>在Repository name下面填写你要创建的地址，这个地址是就是你的域名。e.g., shoresouth.github.io以后就在地址栏直接输入它就可以访问网站。<br><strong>注：</strong> 名称必须与用户名一致！</li><li>创建之后，点击setting设置远程库：<br>找到GitHub Pages点击Automatic page generator，等待github pages创建完成，然后输入你创建的地址测试github pager是否创建成功。此时页面是空的没有任何东西(404)。</li></ul><p>下面要做的就是使用hexo模板将源码放到github。</p><h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><ul><li>创建一个空文件夹用于存放hexo</li><li>右键该文件夹使用 git bash here</li><li>输入命令：<pre class="line-numbers language-none"><code class="language-none">npm install hexo --save //初始化hexo基础配置文件hexo init //初始化hexo。这个命令和git 仓库命令相似 npm install //配置nodehexo g //加载hexo基础html、css、js等文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><p>当我们安装完毕的时候，就需要对Hexo进行一些配置，具体是通过_config.yml文件来完成的。<br>hexo结构</p><pre class="line-numbers language-none"><code class="language-none">.deploy_git node_modules //包所需要的依赖public // 静态网页存储的目录scaffolds // 样本source // 我们自己的md文件themes // 主题文件.gitignore_config.yml // 配置db.jsonpackage.jsonpackage-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h3><p>hexo server: 相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。</p><pre class="line-numbers language-none"><code class="language-none">hexo s <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 展现页面，证明本地hexo默认模板配置成功。</p><h3 id="推送到远程仓库（github）"><a href="#推送到远程仓库（github）" class="headerlink" title="推送到远程仓库（github）"></a>推送到远程仓库（github）</h3><p>根目录_config.yml中配置自己的远程仓库地址</p><pre class="line-numbers language-none"><code class="language-none"># Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  #repo: https://github.com/ShoreSouth/ShoreSouth.github.io.git //https传输容易失败  repo: git@github.com:ShoreSouth/ShoreSouth.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装git部署插件</p><pre class="line-numbers language-none"><code class="language-none">cnpm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发布hexo到github page</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d //一次性执行清空、刷新、部署三个命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
